/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * ==============================================================================
 * Corne Keyboard (CRKBD) - Row-First (Horizontal) Key Indexing
 * ==============================================================================
 *
 * Description:
 * Indexing starts at 0 and proceeds from left to right across the entire row,
 * spanning both halves, before moving down to the next row. This method
 * is commonly used in firmware like ZMK.
 *
 *
 * ------------------------------ MAIN CLUSTER ------------------------------
 *
 * Row 0 (Top): Indices 0 - 11
 *                  <---------- Left Half ------->    <-------- Right Half --------->
 *                  ┌────┬────┬────┬────┬────┬────┐   ┌────┬────┬────┬────┬────┬────┐
 *                  │ 00 │ 01 │ 02 │ 03 │ 04 │ 05 │   │ 06 │ 07 │ 08 │ 09 │ 10 │ 11 │
 *                  ├────┼────┼────┼────┼────┼────┤   ├────┼────┼────┼────┼────┼────┤
 *                  │ 12 │ 13 │ 14 │ 15 │ 16 │ 17 │   │ 18 │ 19 │ 20 │ 21 │ 22 │ 23 │
 *                  ├────┼────┼────┼────┼────┼────┤   ├────┼────┼────┼────┼────┼────┤
 *                  │ 24 │ 25 │ 26 │ 27 │ 28 │ 29 │   │ 30 │ 31 │ 32 │ 33 │ 34 │ 35 │
 *                  └────┴────┴────┴────┴────┴────┘   └────┴────┴────┴────┴────┴────┘
 *
 *
 * ----------------------------- THUMB CLUSTERS -----------------------------
 *
 * Row 3 (Thumbs): Indices 36 - 41
 *                                <- Left Cluster ->  <- Right Cluster ->
 *                                 ┌────┬────┬────┐   ┌────┬────┬────┐
 *                                 │ 36 │ 37 │ 38 │   │ 39 │ 40 │ 41 │
 *                                 └────┴────┴────┘   └────┴────┴────┘
 *
 *
 * Index Range Summary:
 * -----------------------------
 *  - Top Row:       0 - 11
 *  - Home Row:     12 - 23
 *  - Bottom Row:   24 - 35
 *  - Thumb Cluster: 36 - 41
 * -----------------------------
 *  Total Keys: 42 (indices 0 through 41)
 *
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 800  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <zmk-helpers/key-labels/42.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>


&sk {
    release-after-ms = <1000>;
    quick-release;
    lazy;
    ignore-modifiers;
};

&mmv {
    acceleration-exponent = <1>;          // 1
    time-to-max-speed-ms = <500>;         // 300
    delay-ms = <0>;                       // 0
};

&lt {
    tapping-term-ms = <200>; // default 200
    flavor = "balanced"; // or hold-preferred or tap-preferred
    quick-tap-ms = <219>;
};

&mt {
    tapping-term-ms = <200>; // default 200
    quick-tap-ms = <219>;
};

/ {
    combos {
        compatible = "zmk,combos";

        // -- parenthesis and brackets

        combo_para_left {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 5>;
            timeout-ms = <30>;
        };

        combo_para_right {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
            timeout-ms = <30>;
        };

        combo_brack_left {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <16 17>;
            timeout-ms = <30>;
        };

        combo_brack_right {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <18 19>;
            timeout-ms = <30>;
        };

        combo_brace_left {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <28 29>;
            timeout-ms = <30>;
        };

        combo_brace_right {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <30 31>;
            timeout-ms = <30>;
        };

        //

        combo_double_quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <15 16>;
            timeout-ms = <30>;
        };

        combo_apostr {
            bindings = <&kp APOSTROPHE>;
            key-positions = <19 20>;
            timeout-ms = <30>;
        };

        combo_tilda {
            bindings = <&kp TILDE>;
            key-positions = <0 12>;
            timeout-ms = <30>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <12 24>;
            timeout-ms = <30>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <3 4>;
            timeout-ms = <30>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <2 3>;
            timeout-ms = <30>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <7 8>;
            timeout-ms = <30>;
        };

        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <8 9>;
            timeout-ms = <30>;
        };

        combo_lt {
            bindings = <&kp LESS_THAN>;
            key-positions = <27 28>;
            timeout-ms = <30>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <17 18>;
            layers = <0>;
        };

        combo_caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <5 6>;
            layers = <0>;
        };


        combo_gt {
            bindings = <&kp GREATER_THAN>;
            key-positions = <31 32>;
            timeout-ms = <30>;
        };

        combo_vol_up {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <11 23>;
            layers = <0>;
        };

        combo_vol_down {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <23 35>;
            layers = <0>;
        };


        // combo_em-dash {
        //     bindings = <&emdsh>;
        //     key-positions = <2 3 4>;
        //     layers = <0>;
        // };
    };

    macros {
        arrow_func: arrow_func {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>, <&macro_press>;

            label = "ARROW_FUNC";
        };

        emdsh: emdsh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp SPACE &kp MINUS &kp MINUS &kp SPACE>,
                <&macro_press>;

            label = "EMDSH";
        };
    };

    behaviors {
        lbhm: left_balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <219>;    // <---[[moderate duration]]
            quick-tap-ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = < 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 >;
            hold-trigger-on-release;
        };

        rbhm: right_balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <219>;    // <---[[moderate duration]]
            quick-tap-ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = < 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 >;
            hold-trigger-on-release;
        };

        arrow_func_tap: arrow_func_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "ARROW_FUNC_TAP";
            #binding-cells = <0>;
            bindings = <&kp GREATER_THAN>, <&arrow_func>;
        };

        underspace: underspace {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDERSPACE";
            bindings = <&lt 1 SPACE>, <&kp UNDER>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        sqtctrl: squote_lctrl {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SQT>, <&kp LC(RET)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&gresc     &kp Q         &kp W            &kp E              &kp R         &kp T        &kp Y           &kp U            &kp I               &kp O            &kp P                 &kp LEFT_BRACKET
&kp LCTRL  &lbhm LGUI A  &lbhm LALT S  &lbhm LEFT_SHIFT D  &lbhm LCTRL F  &kp G        &kp H           &rbhm RCTRL J     &rbhm RSHIFT K  &rbhm LALT L  &rbhm LGUI SEMICOLON  &sqtctrl
&sk LSHFT  &kp Z         &kp X            &kp C              &kp V         &kp B        &kp N           &kp M            &kp COMMA           &kp DOT          &kp FSLH              &sk RSHIFT
                                          &kp LCTRL          &lt 2 TAB     &mt LGUI RET &underspace     &lt 3 BACKSPACE  &kp DEL
            >;
        };
        nav_layer {
            bindings = <
&mmv MOVE_LEFT     &mmv MOVE_DOWN  &mmv MOVE_UP    &mmv MOVE_RIGHT  &mkp LCLK          &mkp RCLK            &mmv MOVE_LEFT     &mmv MOVE_DOWN  &mmv MOVE_UP    &mmv MOVE_RIGHT  &mkp LCLK          &mkp RCLK
&kp LEFT           &kp DOWN_ARROW  &kp UP_ARROW    &kp RIGHT        &kp K_APPLICATION  &kp K_CMENU          &kp LEFT           &kp DOWN_ARROW  &kp UP_ARROW    &kp RIGHT        &kp K_APPLICATION  &kp K_CMENU
&mkp MB4           &kp HOME        &kp PAGE_DOWN   &kp PG_UP        &kp END            &mkp MB5             &mkp MB4           &kp HOME        &kp PAGE_DOWN   &kp PG_UP        &kp END            &mkp MB5
                                                   &trans           &trans             &trans               &trans             &trans          &trans
            >;
        };

        num_layer {
            bindings = <
&kp GRAVE      &kp EXCL       &kp AT       &kp HASH      &kp DLLR     &kp PRCNT         &kp CARET     &kp AMPS      &kp ASTRK      &kp LPAR      &kp RPAR      &kp LCTRL
&kp TILDE   &lbhm LGUI N1      &lbhm LALT  N2      &lbhm LSHFT N3      &lbhm LCTRL NUMBER_4  &kp N5             &kp N6     &rbhm RCTRL NUMBER_7  &rbhm RSHIFT N8      &rbhm RALT N9      &rbhm RGUI N0      &trans
&kp LSHFT   &none       &none       &none       &kp LG(F11)          &kp LG(F12)        &none       &kp KP_EQUAL         &none       &none       &kp BSLH    &kp F10
                                    &none       &none                &none              &kp KP_N1   &kp KP_N2            &kp KP_N3
            >;
        };

        kb_utils {
            bindings = <
&bootloader  &none           &kp PSCRN     &kp LALT(PSCRN)   &none         &none           &none            &mkp MB1        &mkp MB2        &mkp MB3          &none        &studio_unlock
&none        &kp C_PREVIOUS  &kp C_MUTE    &kp C_PLAY_PAUSE  &kp C_NEXT    &none           &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_UP    &mmv MOVE_RIGHT   &none        &none
&bt BT_CLR   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4    &none            &mkp MB4        &msc SCRL_DOWN  &msc SCRL_UP      &mkp MB5     &none
                                           &none             &none         &none           &mkp MB1         &mkp MB2        &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};